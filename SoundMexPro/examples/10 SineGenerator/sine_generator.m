%
%                    Example for usage of SoundMexPro
% Copyright Hoerzentrum Oldenburg gGmbH Oldenburg 2015, written by Daniel Berg
%
% This example shows how to use a MATLAB script plugin to generate a sine
% tone and change frequency on the fly
%
%
% Declaring 'main' as function, because GUI is implemented as function at the bottom
% of this file!
function sine_generator()

% call tutorial-initialization script
addpath('..\..\tutorial');
t_00b_init_tutorial


% initialize SoundMexPro with first ASIO driver, use two output, no input
% channels (default)
if 1 ~= soundmexpro('init', ...                             % command name
        'driver', smpcfg.driver, ...                        % driver index
        'output', smpcfg.output, ...                        % list of output channels to use            
        'pluginstart', 'sine_generator_plugin_start', ...   % name of MATLAB command to call on startup. NOTE: must be in the MATLAB search path!!
        'pluginproc', 'sine_generator_plugin_proc', ...     % name of MATLAB command to call for every buffer. NOTE: must be in the MATLAB search path!!
        'pluginshow', 0, ...                                % flag if to show processing MATLAB engine (debugging only!)
        'pluginkill', 1 ...                                 % flag if to kill processing MATLAB engine on 'exit'
        )
    error(['error calling ''init''' error_loc(dbstack)]);
end


% show the gui defined below
sine_generator_gui;
% set initial value
sine_generator_setfreq;

% start playback with 'length' 0 i.e. zeros are played
if 1~= soundmexpro('start', 'length', 0) 
    error(['error calling ''start''' error_loc(dbstack)]);
end
pause(0.5)
started = 1;
while started
    pause(0.1);
    % check if device is still running ('Stop') button stops output)
    [success, started] = soundmexpro('started');
    if success ~= 1
        clear soundmexpro;
        close all;
        error(['error calling ''started''' error_loc(dbstack)]);
    end
end

% done
close all;
clear soundmexpro;
end

% -------------------------------------------------------------------------
% End of example, GUI definition below
% callback for setting frequency implemented in sine_generator_setfreq.m
% -------------------------------------------------------------------------


% function creating a test GUI window
function fig = sine_generator_gui()

% edit this values to get the desired look
fw = 0.4;                 % figureWidth
fh = 0.15;                 % figureHeigth


h0 = figure('MenuBar','none',...
    'Name','Changing sine frequency', ...
    'PaperPosition',[18 180 576 432], ...
    'PaperUnits','points', ...
    'Units','normalized',...
    'Position',[(1-fw)/2 (1-fh)/2 fw fh], ...
    'Resize','off',...
    'Tag','Fig1', ...
    'ToolBar','none');
h1 = uicontrol('Parent',h0, ...
    'Style', 'text', ...
    'Units','normalized', ...
    'Position',[0.1 0.70 0.8 0.2], ...
    'FontName','Arial',...
    'FontUnits', 'normalized',...
    'FontSize',0.8, ...
    'String','', ...
    'Tag','Text1');
h2 = uicontrol('Parent',h0, ...
    'Style', 'slider', ...
    'Min', 100, ...
    'Max', 500, ...
    'Value', 440, ...
    'SliderStep',[1/20 1/10], ...
    'Units','normalized', ...
    'ListboxTop',0, ...
    'Position',[0.1 0.40 0.8 0.2], ...
    'FontName','Arial',...
    'FontUnits', 'normalized',...
    'FontSize',0.4, ...
    'String','', ...
    'callback', 'sine_generator_setfreq', ...    
    'Tag','Slider1');
h3 = uicontrol('Parent',h0, ...
    'Units','normalized', ...
    'ListboxTop',0, ...
    'Position',[0.1 0.1 0.8 0.2], ...
    'FontName','Arial',...
    'FontUnits', 'normalized',...
    'FontSize',0.4, ...
    'String','Stop', ...
    'callback', 'soundmexpro(''stop'');', ...    
    'Tag','Pushbutton1');
if nargout > 0, fig = h0; end
end