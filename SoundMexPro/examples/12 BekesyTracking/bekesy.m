%
%                    Example for usage of SoundMexPro
% Copyright Hoerzentrum Oldenburg gGmbH Oldenburg 2015, written by Daniel Berg
%
% This example shows how to use a MATLAB script plugin to implement a
% Bekesy-Tracking procedure. The script startup procedure
% bekesy_plugin_start.m reads the configuration written below (save 
% bekesy.mat settings). The processing script bekesy_plugin_proc.m
% generates a sine of ascending frequency on the fly. This main script
% adjusts level and plots level over frequency.
%
% NOTE: this example does _not_ run on MATLAB < 6, because the syntax
%       set(hFigUser, 'KeyPressFcn', @keydown);
% yields an error. In that case you may have to adjust the callbacks
% correspondingly!
%
% NOTE: after starting the example you hear 125 Hz at 0 dB attenuation. Pressing AND
% holding read button on the extra form lowers the level. Then release the button 
% if you don't hear  the initial tone any more. After releasing the sine sweep starts 
% and the level is raised until the button is pressed again, then level is lowered again....

function bekesy()

% call tutorial-initialization script
addpath('..\..\tutorial');
t_00b_init_tutorial

% global flag used for stopping meausrement(see below)
global stopcondition;
stopcondition = 0;
global sweepstarted;
sweepstarted = 0;
% global flag for level direction (up/down)
global IncreaseLevel;
IncreaseLevel = 1;
% global handle of user input figure
global hFigUser;

% set some global properties of the test
settings.startfreq  = 125;      % start frequency in Hz
settings.stopfreq   = 8000;     % stop frequency in Hz
settings.sweeptime  = 300;      % time in seconds for complete frequency sweep
settings.dBperSec   = 2.5;      % level change per second
settings.samplerate = 44100;    % samplerate to use
settings.minlevel   = -80;      % minimum level in dB to use (maximum is 0 dB)

% write this settings to a MAT-file to pass it to plugin
save bekesy.mat settings;

% initialize SoundMexPro with first ASIO driver, use two output, no input
% channels (default)
if 1 ~= soundmexpro('init', ...                     % command name
        'driver', smpcfg.driver , ...               % driver index
        'output', smpcfg.output, ...                % list of output channels to use            
        'samplerate', settings.samplerate, ...      % sampling frequency
        'pluginstart', 'bekesy_plugin_start', ...   % name of MATLAB command to call on startup. NOTE: must be in the MATLAB search path!!
        'pluginproc', 'bekesy_plugin_proc', ...     % name of MATLAB command to call for every buffer. NOTE: must be in the MATLAB search path!!
        'pluginshow', 0, ...                        % flag if to show plugin processing MATLAB engine (debugging only!)
        'pluginkill', 1 ...                         % flag if to kill plugin processing MATLAB engine on 'exit'
        )
    error(['error calling ''init''' error_loc(dbstack)]);
end

% as an example mute channel 1 here. To measure other ear change
% correspondingly
if 1 ~= soundmexpro('channelmute', ...              % command name
        'output', [0 1], ...   % name of MATLAB command to call on startup. NOTE: must be in the MATLAB search path!!
        'value', [0 1] ...                         % flag if to kill processing MATLAB engine on 'exit'
        )
    error(['error calling ''channelmute''' error_loc(dbstack)]);
end


% show the gui windows defined below
figPlot = bekesy_gui;

% retrieve handle of textfield containing the frequency
textfield = findobj('Tag','FrequencyLabel');
if textfield == 0
    error('cannot find FrequencyLabel text field');
end

% start playback with 'length' 0, i.e. zeros are played. The real data to
% be played are generated by plugin in bekesy_plugin_proc.m
if 1~= soundmexpro('start', 'length', 0)
    error(['error calling ''start''' error_loc(dbstack)]);
end

% initialize data and plot
freqs = [ settings.startfreq ];
levels = 0;
set(0,'CurrentFigure', figPlot);
% plot starting point and store plot handle
hPlotHandle = plot(freqs, levels);
% adjust axes limits
xlim([settings.startfreq settings.stopfreq]);
ylim([settings.minlevel 0]);


% set while loop speed
loopspeed = 0.1;
% calculate level increment/decrement per loop to change level by
% settings.dBperSec per second
levelincrementfactor =  2 -(10^(loopspeed*settings.dBperSec/20));
% convert min level in dB to linear volume
minlevelfactor = 10^(settings.minlevel/20);
counter = 0;
% run a loop where we adjust the level
while stopcondition == 0
    pause(loopspeed);
    % break here if user input window was closed
    if (ishandle(hFigUser) == 0)
        break;
    end
    % check if device is still running: if not, then  some fatal error
    % may have stopped the device and we have to break the endless loop!
    [success, started] = soundmexpro('started');
    if success ~= 1
        clear soundmexpro;
        close all;
        error(['error calling ''started''' error_loc(dbstack)]);
    elseif started == 0
        error('device unexpectedly stopped');
    end

    % retrieve current volume
    [success, volume] = soundmexpro('volume');
    if success ~= 1
        clear soundmexpro;
        close all;
        error(['error calling ''volume''' error_loc(dbstack)]);
    end
    % increase or decrease level respectively
    if (IncreaseLevel == 0)
        newlevel = volume(1,1) * levelincrementfactor;
    else
        newlevel = volume(1,1) / levelincrementfactor;
    end
    % apply constraints (0dB to settings.minlevel, i.e. linear factor from
    % 1 to minlevelfactor
    if (newlevel > 1)
        newlevel = 1;
    elseif (newlevel < minlevelfactor)
        newlevel = minlevelfactor;
    end
    % update level in soundmexpro only if it has changed
    if newlevel ~= volume(1,1)
        if 1 ~= soundmexpro('volume', 'value', newlevel)
            error(['error calling ''volume''' error_loc(dbstack)]);
        end
    end

    % retrieve current frequency from plugin and current level on every 3rd
    % run of the loop
    if mod(counter, 3) == 0
        [success, userdata] = soundmexpro('plugingetdata');
        if success ~= 1
            clear soundmexpro;
            close all;
            error(['error calling ''plugingetdata''' error_loc(dbstack)]);
        end
        % check, if plugin returns a negative frequency to tell us, that the
        % measurement is done
        if userdata(1,1) < 0
            smp_disp('Measurement done.')
            break;
        end
        % show current frequency and level
        newlevel = 20*log10(newlevel);
        set(textfield, 'String', sprintf(' Freq: %0.f Hz, Level: %.1f dB', userdata(1,1), newlevel));
        % store new frequency and level
        freqs = [freqs userdata(1,1)];
        levels = [levels newlevel];
        % update plot
        set(hPlotHandle(1),'xdata',freqs,'ydata',levels) ;
        drawnow;
    end
    counter = counter + 1;
end

% done
if (ishandle(hFigUser) ~= 0)
    close(hFigUser);
end
clear soundmexpro;
waitfor(figPlot);

% -------------------------------------------------------------------------
% End of example, helper functions, button callbacks and GUI definition below
% -------------------------------------------------------------------------

% function called by Stop-Button: sets global variable to tell upper while
% loop to break!
function dostop(src,eventdata)
global stopcondition;
global hFigUser;
if (ishandle(hFigUser) ~= 0)
    close(hFigUser);
end
stopcondition = 1;

% function adjusting level adjustment direction and gui color (user
% feedback)
function dokey(value)
global hFigUser;
global IncreaseLevel;
IncreaseLevel = value;
set(hFigUser, 'Color', [value 1-value 0]);

% function attached to mouse down and key down
function keydown(src,eventdata)
dokey(0);

% function attached to mouse up and key up
function keyup(src,eventdata)
global sweepstarted;
dokey(1);
% tell plugin to start the frequency sweep on first 'keyup' event
if sweepstarted == 0
    sweepstarted = 1;
    % tell plugin to start with frequency sweep
    % first retrieve plugindata to have matrix of correct size
    [success, userdata] = soundmexpro('plugingetdata');
    if success ~= 1
        clear soundmexpro;
        close all;
        error(['error calling ''plugingetdata''' error_loc(dbstack)]);
    end
    % set second value to 1: plugin will check for this!
    userdata(1,2) = 1;
    if 1 ~= soundmexpro('pluginsetdata', 'data', userdata)
        clear soundmexpro;
        close all;
        error(['error calling ''pluginsetdata''' error_loc(dbstack)]);
    end
end






% function creating a user input window and a plotting window
function fig = bekesy_gui()

global hFigUser;
hFigUser = figure('MenuBar','none',...
    'Name','Bekesy-Tracking user input', ...
    'PaperUnits','points', ...
    'Color', [1 0 0], ...
    'Units','normalized',...
    'NumberTitle', 'off', ...
    'WindowStyle', 'modal', ...
    'Position',[0.05 0.8 0.2 0.1], ...
    'Resize','off',...
    'WindowButtonDownFcn', @keydown, ...
    'WindowButtonUpFcn', @keyup, ...
    'Tag','Fig1', ...
    'ToolBar','none');



% create figure with plot and 'stop' button
h0 = figure('MenuBar','none',...
    'Name','Bekesy-Tracking', ...
    'NumberTitle', 'off', ...
    'PaperPosition',[18 180 576 432], ...
    'PaperUnits','points', ...
    'Units','normalized',...
    'Position',[0.25 0.25 0.5 0.5], ...
    'Resize','off',...
    'Tag','Fig1', ...
    'ToolBar','none');
h1 = uicontrol('Parent',h0, ...
    'Style', 'text', ...
    'Units','normalized', ...
    'Position',[0.05 0.95 0.9 0.04], ...
    'FontName','Arial',...
    'FontUnits', 'normalized',...
    'FontSize',0.8, ...
    'String','', ...
    'Tag','FrequencyLabel');
h3 = uicontrol('Parent',h0, ...
    'Units','normalized', ...
    'ListboxTop',0, ...
    'Position',[0.05 0.02 0.9 0.1], ...
    'FontName','Arial',...
    'FontUnits', 'normalized',...
    'FontSize',0.4, ...
    'String','Stop', ...
    'callback', @dostop, ...
    'Tag','Pushbutton1');

hAxes = axes('position', [0.05 0.18 0.9 0.75]);
% set focus to user input figure again
figure(hFigUser);
%hold on
if nargout > 0, fig = h0; end
